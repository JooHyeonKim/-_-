package rsa3;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.security.KeyPair;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.util.Base64;

public class RSATest {

    public static void main(String[] args) throws Exception {
        // RSA 키쌍 생성
        KeyPair keyPair = CipherUtil.genRSAKeyPair();

        PublicKey publicKey = keyPair.getPublic();
        PrivateKey privateKey = keyPair.getPrivate();
        
        BufferedReader fileReader = new BufferedReader(new FileReader("user.txt"));
        BufferedWriter writer = new BufferedWriter(new FileWriter("userEncoding.txt"));

		// a line from the file
		String line;
		String[] person=new String[50];
		//person[]에는 한 사람의 사용자의 정보가 모두 들어가 있음
		int p=0;

		// read lines until we read a line that is null (i.e. no more lines)
		while((line = fileReader.readLine()) != null) {
		       // split the line, returns an array of parts
		       person[p++] =line; 
		}
		fileReader.close();
		

		for(int i=1;i<p;i++) { //사람 수 p만큼 루프 돎 
			String[] tmp=person[i].split("/");
			writer.write(person[0]);
			for(int j=1;j<9;j++) {
				//System.out.print(tmp[j]+"/");
				
				if(j==2||j==4||j==6) {//주민번호, 비밀번호, 전화번호 암호화
					//암호화
					 String encrypted = CipherUtil.encryptRSA(tmp[j], publicKey);
					 encrypted+="/";
					 writer.write(encrypted);
				}
				else {
					tmp[j]+="/";
					writer.write(tmp[j]);
				}
			}
			//tmp[0]:회원번호/tmp[1]:회원명/tmp[2]:주민번호/tmp[3]:아이디/tmp[4]:비밀번호/tmp[5]:주소/tmp[6]:전화번호/tmp[7]:대여권수/tmp[8]:위치
			writer.close();
			//주민번호 암호화
			String plainText = tmp[2]; 
			System.out.println(i+"번 회원 "+tmp[1]+"님의 암호화될 주민번호 : "+ plainText);
			
			// Base64 인코딩된 암호화 문자열 입니다.
	        String encrypted1 = CipherUtil.encryptRSA(plainText, publicKey);
	        System.out.println("encrypted : " + encrypted1);
	        
	        // 복호화 합니다.
	        String decrypted1 = CipherUtil.decryptRSA(encrypted1, privateKey);
	        System.out.println("decrypted : " + decrypted1);

	        // 공개키를 Base64 인코딩한 문자일을 만듭니다.
	        byte[] bytePublicKey = publicKey.getEncoded();
	        String base64PublicKey = Base64.getEncoder().encodeToString(bytePublicKey);
	        System.out.println("Base64 Public Key : " + base64PublicKey);

	        // 개인키를 Base64 인코딩한 문자열을 만듭니다.
	        byte[] bytePrivateKey = privateKey.getEncoded();
	        String base64PrivateKey = Base64.getEncoder().encodeToString(bytePrivateKey);
	        System.out.println("Base64 Private Key : " + base64PrivateKey);
	        System.out.println();
	        
	      //전화번호 암호화
			String plainText2 = tmp[4]; 
			System.out.println(i+"번 회원 "+tmp[1]+"님의 암호화될 전화번호 : "+ plainText2);
			
			// Base64 인코딩된 암호화 문자열 입니다.
	        String encrypted2 = CipherUtil.encryptRSA(plainText2, publicKey);
	        System.out.println("encrypted : " + encrypted);
	        
	        // 복호화 합니다.
	        String decrypted2 = CipherUtil.decryptRSA(encrypted2, privateKey);
	        System.out.println("decrypted : " + decrypted2);

	        // 공개키를 Base64 인코딩한 문자일을 만듭니다.
	        byte[] bytePublicKey2 = publicKey.getEncoded();
	        String base64PublicKey2 = Base64.getEncoder().encodeToString(bytePublicKey2);
	        System.out.println("Base64 Public Key : " + base64PublicKey2);

	        // 개인키를 Base64 인코딩한 문자열을 만듭니다.
	        byte[] bytePrivateKey2 = privateKey.getEncoded();
	        String base64PrivateKey2 = Base64.getEncoder().encodeToString(bytePrivateKey2);
	        System.out.println("Base64 Private Key : " + base64PrivateKey2);
	        System.out.println();
	        System.out.println();
		}
		writer.close();
		
    }

}
